//ステージの進捗具合を制御
let currentStage =1;
//プレーヤーの体力
let applicantHp=100;
let playerHp=100;

//

function randomNumber(){


const min = 0;
const max = 2;
const randomNumber = Math.floor(Math.random()* (max - min + 1)) + min;
    console.log("ランダムナンバーは" + randomNumber);
    return randomNumber;

}
//負けの場合
function loseRoute(){
    if(currentStage===1){

    }
}

function validationJudge(){
    if(playerHp<=0){
        console.log('負け');
        loseRoute();
    } else if(applicantHp<=0){

    }
}

$("#attack_click_1").click(function(){
    attackModel();
})

function attackModel(){
    const applicantAttack = randomNumber();
    if(applicantAttack===0){
        //攻撃のアクション
        applicantHandAttack();
        //HP処理
        applicantHp = applicantaHp - plyaerAttack;
        console.log("＝応募者はこうげき＝")

    }else if(applicantAttack===1){
        //応募者は蓄える
        applicantHandCharege();
        //HP処理
        applicantHp = applicantaHp - plyaerAttack;
        console.log("＝応募者は蓄える＝")

    }else{
        //応募者は守る
        applicantHandDefense();
        console.log("＝応募者は守る＝")

    }
}


//攻撃のアクション
function applicantHandAttack(){

}